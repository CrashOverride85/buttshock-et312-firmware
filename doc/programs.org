* ET-312 Programs and Modules
** Introduction
This document contains notes about how programs and modules work.  You need to be
familiar with the memory layout and refer to
[[https://github.com/metafetish/buttshock-protocol-docs/blob/master/doc/et312-protocol.org][ET312 Protocol Documentation]].

*** Terminology

- A Program is either an Internal or Use Uploaded program.  Examples of Programs are "Waves", "Phase 2", "User 1".
- Each Program is made up of a number of Modules.
- Each Module contains a variable number of Instructions.
- The Instruction set is very limited, mostly just allowing certain memory operations.

*** Loading a Program (inbuilt Programs)

- As a user you select a program name using the buttons on the box
- The firmware will set up some defaults into the memory locations 0x80+ (channel A) and 0x180+ (channel B) that are the same for every program
- The firmware has a mapping for the given Program to which Module gets loaded
- The Instructions from that Module are parsed, one by one.
- Each Instruction will read or write or manipulate memory (specifically the 0x80+ and 0x180+ locations)
- A second Module may then get parsed depending on the Program.  This is to handle the complexities of allowing a mode to be "Split" an run different Programs on A and B channels.

The Modules do not stay running continuously, they are only used to initialize the Program.  Actions that then
happen (like intensity changes, frequency changes) all take place based on the counters and other memory
settings.

Modules can set up triggers that can cause Modules to get run at some later point, so for example a Module could set
up one of the timers to run, and when the timer reaches some value it causes a different
Module to then get loaded.  The "Rhythm" mode for example cycles between three different Modules in this way.

You can use the utility "module-decode.py" in this repo to display the Instructions for a given Module, both in-built
using the firmware image, or by examining the memory on a box.  For example:

#+BEGIN_EXAMPLE
$ python3 module-decode.py -i ../firmware/312-16-decrypted.bin -d ../../buttshock-protocol-docs/doc/et312-protocol.org -m 11 
#+END_EXAMPLE

*** Defaults

TBD: Explain the default memories here, and all the counters.  

*** Example: Program "Waves"

If you select Program "Waves" then the firmware loads Module 11.  Module 11 contains these Instructions:

#+BEGIN_EXAMPLE
memory[0086 *Multi Adjust Range Min* (0x0f)]=01
memory[0087 *Multi Adjust Range Max* (0xff)]=40
memory[00be *Channel A: Current Width Modulation Select* (0x04)]=41
memory[00bb *Channel A: Current Width Modulation Increment* (0x01)]=02
memory[00b5 *Channel A: Current Frequency Modulation Select* (0x08)]=41
memory[00b0 *Channel A: Current Frequency Modulation Max* (0x64)]=80
#+END_EXAMPLE

If the user is not using the Split mode, for Program "Waves" the firmware will then also load Module 12.
Module 12 contains these Instructions:

#+BEGIN_EXAMPLE
memory[01bb *Channel B: Current Width Modulation Increment* (0x01)]=03
memory[01b0 *Channel B: Current Frequency Modulation Max* (0x64)]=40
#+END_EXAMPLE

